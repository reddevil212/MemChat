// File: components\chat-interface.tsx
"use client"

import { useState, useEffect, useRef } from "react"
import { onAuthStateChanged, signOut } from "firebase/auth"
import { doc, getDoc, updateDoc, serverTimestamp, collection, query, where, onSnapshot } from "firebase/firestore"
import { auth, db } from "@/lib/lib_firebase"
import { User, Chat, Message } from "./types/types_chat"
import { CallContext } from "./contexts/contexts_CallContext"
import { chatService } from "./services/lib_services_chat"
import { useToast } from "@/hooks/use-toast"
import { useMobile } from "@/hooks/use-mobile"
import { CallProvider, useCall } from "./contexts/contexts_CallContext"
import { Card, CardContent, CardTitle, CardDescription } from "@/components/ui/card"
import { ChatSidebar } from "./chat/components_chat_ChatSidebar"
import { ChatHeader } from "./chat/components_chat_ChatHeader"
import { MessageInput } from "./chat/components_chat_MessageInput"
import { MessageList } from "./chat/components_chat_MessageList"
import { WelcomeScreen } from "./chat/components_chat_WelcomeScreen"
import { toast } from "sonner"

function ChatContent() {
  
  const isMobile = useMobile()
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // State management
  const [sidebarOpen, setSidebarOpen] = useState(!isMobile)
  const [currentUser, setCurrentUser] = useState<User | null>(null)
  const [users, setUsers] = useState<User[]>([])
  const [chats, setChats] = useState<Chat[]>([])
  const [selectedChat, setSelectedChat] = useState<Chat | null>(null)
  const [selectedChatUser, setSelectedChatUser] = useState<User | null>(null)
  const [messages, setMessages] = useState<Message[]>([])
  const [newMessage, setNewMessage] = useState("")
  const [searchQuery, setSearchQuery] = useState("")
  const [isUploading, setIsUploading] = useState(false)

  const { callState, startCall, endCall } = useCall()

  const handleDragOver = (event: React.DragEvent) => {
    event.preventDefault()
    event.stopPropagation()
  }

  const handleDrop = (event: React.DragEvent) => {
    event.preventDefault()
    event.stopPropagation()

    const file = event.dataTransfer.files[0]
    if (file) {
      handleFileUpload(file)
    }
  }

  // Auth effect
  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        const userDoc = await getDoc(doc(db, "users", user.uid))
        if (userDoc.exists()) {
          const userData = userDoc.data() as User
          setCurrentUser({
            ...userData,
            displayName: userData.displayName || user.displayName || "Unknown User",
            photoURL: userData.photoURL || user.photoURL || null,
          })

          await updateDoc(doc(db, "users", user.uid), {
            lastSeen: serverTimestamp(),
            status: "online"
          })
        } else {
          handleSignOut()
        }
      } else {
        document.cookie = "user_session=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT"
        window.location.reload()
      }
    })

    return () => unsubscribe()
  }, [])

  // Load users effect
  useEffect(() => {
    if (!currentUser) return

    const q = query(
      collection(db, "users"),
      where("uid", "!=", currentUser.uid)
    )

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const usersData: User[] = []
      snapshot.forEach((doc) => {
        usersData.push(doc.data() as User)
      })
      setUsers(usersData)
    })

    return () => unsubscribe()
  }, [currentUser])

  // Load chats effect
  useEffect(() => {
    if (!currentUser) return

    const unsubscribe = chatService.listenToChats(currentUser.uid, setChats)
    return () => unsubscribe()
  }, [currentUser])

  // Load messages for selected chat
  useEffect(() => {
    if (!selectedChat) {
      setMessages([])
      return
    }

    const unsubscribe = chatService.listenToMessages(
      selectedChat.id,
      setMessages,
      async (messageId) => {
        if (currentUser) {
          await updateDoc(doc(db, "chats", selectedChat.id, "messages", messageId), {
            read: true,
          })
        }
      }
    )

    return () => unsubscribe()
  }, [selectedChat, currentUser])

  // Get selected chat user effect
  useEffect(() => {
    if (!selectedChat || !currentUser || !users.length) {
      setSelectedChatUser(null)
      return
    }

    const otherUserId = selectedChat.participants.find(
      (id) => id !== currentUser.uid
    )
    if (otherUserId) {
      const chatUser = users.find((user) => user.uid === otherUserId) || null
      setSelectedChatUser(chatUser)
    }
  }, [selectedChat, currentUser, users])

  // Scroll to bottom effect
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }, [messages])

  const handleSignOut = async () => {
    try {
      if (currentUser) {
        await updateDoc(doc(db, "users", currentUser.uid), {
          lastSeen: serverTimestamp(),
          status: "offline"
        })
      }
      await signOut(auth)
      document.cookie = "user_session=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT"
      window.location.reload()
    } catch (error) {
      toast("Error signing out",{
       
        description: "Please try again",
        
      })
    }
  }

  const startNewChat = async (userId: string) => {
    if (!currentUser) return

    try {
      const chat = await chatService.createOrGetChat(currentUser.uid, userId)
      setSelectedChat(chat)
      if (isMobile) {
        setSidebarOpen(false)
      }
    } catch (error) {
      toast("Error starting chat",{
       
        description: "Please try again",
       
      })
    }
  }

  const handleSendMessage = async () => {
    if (!newMessage.trim() || !selectedChat || !currentUser) return

    try {
      await chatService.sendMessage(selectedChat.id, {
        senderId: currentUser.uid,
        text: newMessage,
        timestamp: new Date().toISOString(),
        read: false,
      })
      setNewMessage("")
    } catch (error) {
      toast("Error sending message",{
       
        description: "Please try again",
        
      })
    }
  }

  const handleFileUpload = async (file: File) => {
    if (!file || !selectedChat || !currentUser) return

    try {
      setIsUploading(true)
      const downloadURL = await chatService.uploadFile(file, selectedChat.id)

      await chatService.sendMessage(selectedChat.id, {
        senderId: currentUser.uid,
        text: `Sent ${file.type.split('/')[0]}`,
        fileUrl: downloadURL,
        fileType: file.type,
        fileName: file.name,
        timestamp: new Date().toISOString(),
        read: false,
      })

      toast( "File uploaded",{
      
        description: "File has been sent successfully.",
      })
    } catch (error) {
      console.error("Error uploading file:", error)
      toast("Upload failed",{
       
        description: "Could not upload file. Please try again.",
       
      })
    } finally {
      setIsUploading(false)
    }
  }

  const handleFileSelect = () => {
    const fileInput = document.createElement("input")
    fileInput.type = "file"
    fileInput.accept = "image/*, video/*, audio/*, .pdf, .doc, .docx, .txt"
    fileInput.click()

    fileInput.onchange = (e) => {
      const file = (e.target as HTMLInputElement).files?.[0]
      if (file) {
        handleFileUpload(file)
      }
    }
  }

  const handleVoiceMessageSend = async (audioBlob: Blob, duration?: number) => {
    if (!selectedChat || !currentUser) return

    try {
      setIsUploading(true)
      const downloadURL = await chatService.uploadFile(audioBlob, selectedChat.id)

      await chatService.sendMessage(selectedChat.id, {
        senderId: currentUser.uid,
        text: "Sent a voice message",
        fileUrl: downloadURL,
        fileType: "audio/wav",
        duration: duration,
        fileName: "voice_message.wav",
        timestamp: new Date().toISOString(),
        read: false,
      })

      toast("Voice message sent",{
        
        description: "Voice message has been sent successfully.",
      })
    } catch (error) {
      console.error("Error sending voice message:", error)
      toast("Send failed",{
       
        description: "Could not send voice message. Please try again.",
        
      })
    } finally {
      setIsUploading(false)
    }
  }

  const filteredUsers = users.filter((user) =>
    user.displayName.toLowerCase().includes(searchQuery.toLowerCase())
  )

  return (
    <Card className="flex h-screen bg-background lg:max-w-[1700px] sm:max-w-[320px] border-[-14px]"
      onDragOver={handleDragOver}
      onDrop={handleDrop}>

      {/* Sidebar */}
      <ChatSidebar
        isOpen={sidebarOpen}
        onClose={() => setSidebarOpen(false)}
        currentUser={currentUser}
        users={filteredUsers}
        chats={chats}
        selectedChat={selectedChat}
        searchQuery={searchQuery}
        onSearchChange={setSearchQuery}
        onSignOut={handleSignOut}
        onChatSelect={(chat) => {
          setSelectedChat(chat)
          setSidebarOpen(false)
        }}
        onStartChat={startNewChat}
      />

      {/* Chat Area */}
      <CardContent className={`${sidebarOpen ? "hidden" : "flex"} md:flex flex-1 flex-col h-full p-0`}>
        {selectedChat && selectedChatUser ? (
          <>
            <ChatHeader
              user={selectedChatUser}
              onOpenSidebar={() => setSidebarOpen(true)}
              showMenuButton={true}
              onCall={(callType: 'audio' | 'video') => startCall(selectedChatUser.uid, callType)}
            />

            {/* Messages Area */}
            <div className="flex-1 scrolbar-thin overflow-y-auto p-4">
              <MessageList
                messages={messages}
                currentUser={currentUser}
                formatTime={(timestamp) => new Date(timestamp).toLocaleTimeString()}
              />
              <div ref={messagesEndRef} />
            </div>

            <MessageInput
              message={newMessage}
              isUploading={isUploading}
              onMessageChange={setNewMessage}
              onSendMessage={handleSendMessage}
              onFileSelect={handleFileSelect}
              onVoiceMessageSend={handleVoiceMessageSend}
            />
          </>
        ) : (
          <WelcomeScreen
            onOpenSidebar={() => setSidebarOpen(true)}
          />
        )}
      </CardContent>

      {/* Call UI Components */}
      <CallContext.Consumer>
        {(callContext) => {
          if (!callContext) return null
          const { callState, endCall } = callContext

          if (callState.isIncomingCall && !callState.callAccepted) {
            // Incoming call UI
          }

          if (callState.isOutgoingCall || callState.callAccepted) {
            // Ongoing call UI
          }

          return null
        }}
      </CallContext.Consumer>
    </Card>
  )
}

export default function ChatInterface() {
  const [currentUser, setCurrentUser] = useState<User | null>(null)

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (user) => {
      if (user) {
        const userDoc = await getDoc(doc(db, "users", user.uid))
        if (userDoc.exists()) {
          const userData = userDoc.data() as User
          setCurrentUser({
            ...userData,
            displayName: userData.displayName || user.displayName || "Unknown User",
            lastSeen: new Date().toISOString(),
            photoURL: userData.photoURL || user.photoURL || null,
          })
        }
      }
    })

    return () => unsubscribe()
  }, [])

  if (!currentUser) {
    return (
      <Card className="flex items-center justify-center min-h-screen bg-muted/30 animate-fadeIn border-0">
        <CardContent className="text-center relative w-full">
          <div className="absolute inset-0 bg-background blur-lg opacity-50"></div>
          <CardTitle className="text-4xl font-semibold text-foreground mb-4 animate-pulse">
            Be patient, your conversations are loading...
          </CardTitle>
          <div className="w-12 h-12 border-4 border-t-transparent border-primary rounded-full animate-spin mx-auto"></div>
          <CardDescription className="mt-4">
            This might take a few moments. Thanks for your patience!
          </CardDescription>
        </CardContent>
      </Card>
    )
  }

  return (
    <CallProvider currentUser={currentUser}>
      <ChatContent />
    </CallProvider>
  )
}

// File: components\chat\components_chat_ChatHeader.tsx
import { useState, useEffect } from "react"
import { User } from "../types/types_chat"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Globe, MailsIcon, Menu, MoreVertical, Phone, Video } from "lucide-react"
import { useCall } from "../contexts/contexts_CallContext"
import { toast } from "sonner"
import { HoverCard, HoverCardTrigger, HoverCardContent } from "@/components/ui/hover-card"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

// Utility function to format the last seen date
const formatLastSeen = (lastSeen: any): string => {
  if (!lastSeen) return "Unknown";

  let date;
  if (lastSeen.seconds) {
    date = new Date(lastSeen.seconds * 1000); // Firestore Timestamp
  } else if (typeof lastSeen === "string") {
    date = new Date(lastSeen); // String input
  } else {
    return "Unknown";
  }

  if (isNaN(date.getTime())) return "Unknown"; // Invalid date fallback

  const now = new Date();
  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());
  const yesterday = new Date(today);
  yesterday.setDate(today.getDate() - 1);

  if (
    date.getFullYear() === today.getFullYear() &&
    date.getMonth() === today.getMonth() &&
    date.getDate() === today.getDate()
  ) {
    return `Today at ${date.toLocaleTimeString(undefined, {
      hour: '2-digit',
      minute: '2-digit',
    })}`;
  }

  if (
    date.getFullYear() === yesterday.getFullYear() &&
    date.getMonth() === yesterday.getMonth() &&
    date.getDate() === yesterday.getDate()
  ) {
    return `Yesterday at ${date.toLocaleTimeString(undefined, {
      hour: '2-digit',
      minute: '2-digit',
    })}`;
  }

  return `Last seen on ${date.toLocaleDateString(undefined, {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  })} at ${date.toLocaleTimeString(undefined, {
    hour: '2-digit',
    minute: '2-digit',
  })}`;
};

interface ChatHeaderProps {
  user: User
  onOpenSidebar: () => void
  showMenuButton?: boolean
}

export const ChatHeader = ({ user, onOpenSidebar, showMenuButton = false }: ChatHeaderProps) => {
  const { startCall } = useCall()

  // State to track user data and loading status
  const [userData, setUserData] = useState(user);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    // Simulate a delay for skeleton loading (1.5 seconds)
    const timer = setTimeout(() => {
      setLoading(false);
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  // Mock live data update for demonstration
  useEffect(() => {
    // Example of subscribing to a real-time change (like Firestore listener)
    const interval = setInterval(() => {
      // Simulate a data change
      setUserData((prevUserData) => ({
        ...prevUserData,
        lastSeen: new Date().toISOString(), // Update with new "lastSeen" time
      }));
    }, 5000); // Change every 5 seconds

    return () => clearInterval(interval); // Cleanup on unmount
  }, []);

  return (
    <div className="p-3 bg-[#000000] border-b border-gray-800 flex items-center justify-between">
      <div className="flex items-center space-x-3">
        {showMenuButton && (
          <Button
            variant="ghost"
            size="sm"
            className="md:hidden"
            onClick={onOpenSidebar}
          >
            <Menu className="h-4 w-4 text-gray-400" />
          </Button>
        )}

        <HoverCard>
          <HoverCardTrigger>
            <Avatar className="h-8 w-8">
              <AvatarImage src={userData.photoURL || undefined} />
              <AvatarFallback className="bg-green-500 text-white text-sm">
                {userData.displayName.charAt(0).toUpperCase()}
              </AvatarFallback>
            </Avatar>
          </HoverCardTrigger>
          <HoverCardContent className="w-80 p-4 dark:bg-black dark:text-white bg-white text-black rounded-lg shadow-lg">
            {loading ? (
              <div className="flex space-x-4">
                <Skeleton className="h-14 w-14 rounded-full" />
                <div className="space-y-2 w-full">
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-3/4" />
                </div>
              </div>
            ) : (
              <div className="flex space-x-4">
                <Avatar className="h-14 w-14">
                  <AvatarImage src={userData.photoURL || undefined} />
                  <AvatarFallback>{userData.displayName.charAt(0).toUpperCase()}</AvatarFallback>
                </Avatar>
                <div className="space-y-1">
                  <h4 className="text-sm font-semibold">{userData.displayName}</h4>
                  <div className="flex items-center pt-2">
                    <MailsIcon className="mr-2 h-4 w-4 opacity-70" />
                    <span className="text-sm text-gray-500">{userData.email}</span>
                  </div>
                  <div className="flex items-center pt-2">
                    <Globe className="mr-2 h-4 w-4 opacity-70" />
                    <span className="text-xs text-gray-400">{formatLastSeen(userData.lastSeen)}</span>
                  </div>
                </div>
              </div>
            )}
          </HoverCardContent>
        </HoverCard>

        <div className="flex-1 min-w-0">
          <h2 className="font-medium text-sm text-white truncate">
            {userData.displayName}
          </h2>
          <p className="text-xs text-gray-400">
            {userData.status === "online" ? "online" : `${formatLastSeen(userData.lastSeen)}`}
          </p>
        </div>
      </div>

      <div className="flex items-center space-x-2">
        <TooltipProvider >
          <Tooltip >
            <TooltipTrigger > <Button
          variant="ghost"
          size="sm"
          onClick={() => startCall(userData.uid, 'audio')}
          className="text-gray-400 hover:text-white hover:bg-gray-700"
        >
          <Phone className="h-4 w-4" />
        </Button>
        </TooltipTrigger>
            <TooltipContent ><p className="dark:bg-black text-white">Start audio call</p></TooltipContent>
          </Tooltip>
        </TooltipProvider>


        <TooltipProvider >
          <Tooltip >
            <TooltipTrigger>
        <Button
          variant="ghost"
          size="sm"
          onClick={() => startCall(userData.uid, 'video')}
          className="text-gray-400 hover:text-white hover:bg-gray-700"
        >
          <Video className="h-4 w-4" />
        </Button>
            </TooltipTrigger>
            <TooltipContent ><p className="dark:bg-black text-white">Start video call</p></TooltipContent>
            </Tooltip >
              </TooltipProvider >



        <TooltipProvider >
          <Tooltip >
            <TooltipTrigger>
        <Button variant="ghost" size="sm" onClick={() => toast("Coming soon!")} className="text-gray-400 hover:text-white hover:bg-gray-700" >
          <MoreVertical className="h-4 w-4 text-gray-400" />
        </Button>
      </TooltipTrigger>
      <TooltipContent ><p className="dark:bg-black text-white">More</p></TooltipContent>
    </Tooltip >
              </TooltipProvider >
      </div>
    </div>
  )
}


// File: components\chat\components_chat_ChatSidebar.tsx
import { Message, User } from "../types/types_chat"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Search, LogOut, X } from "lucide-react"
import { formatMessageTime, formatTime, getInitials } from "../utils/lib_utils (1)"

// Add Chat interface since it's used but not imported
interface Chat {
  id: string
  participants: string[]
  lastMessage: {
    text: string
    timestamp: string
  } | null
  unreadCount: number
}

// Add UsersList component
interface UsersListProps {
  users: User[]
  onStartChat: (userId: string) => void
}




const UsersList = ({ users, onStartChat }: UsersListProps) => {

  
  return (
    <div className="py-2">
      <h3 className="px-3 py-1 text-xs font-medium text-gray-400">USERS</h3>
      {users.length > 0 ? (
        users.map((user) => (
          <div
            key={user.uid}
            className="px-3 py-2 flex items-center space-x-3 hover:bg-[#2a2a2a] cursor-pointer"
            onClick={() => onStartChat(user.uid)}
          >
            <Avatar className="h-10 w-10">
              <AvatarImage src={user.photoURL || undefined} />
              <AvatarFallback className="bg-green-500 text-white">
                {getInitials(user.displayName)}
              </AvatarFallback>
            </Avatar>
            <div className="flex-1 min-w-0">
              <h4 className="font-medium text-sm text-white truncate">
                {user.displayName}
              </h4>
              <p className="text-xs text-gray-400 truncate">{user.status}</p>
            </div>
          </div>
        ))
      ) : (
        <p className="px-3 py-2 text-sm text-gray-400">No users found</p>
      )}
    </div>
  )
}

// Add ChatsList component
interface ChatsListProps {
  chats: Chat[]
  users: User[]
  currentUser: User | null
  selectedChat: Chat | null
  onChatSelect: (chat: Chat) => void
}




const ChatsList = ({ chats, users, currentUser, selectedChat, onChatSelect }: ChatsListProps) => {
  return (
    <div className="space-y-1">
      {chats.map((chat) => {
        const otherUserId = chat.participants.find(
          (id) => id !== currentUser?.uid
        )
        const chatUser = users.find((user) => user.uid === otherUserId)
       

        return (
          <div
            key={chat.id}
            className={`px-3 py-2 flex items-center space-x-3 cursor-pointer
              ${selectedChat?.id === chat.id ? "bg-[#2a2a2a]" : "hover:bg-[#2a2a2a]"}`}
            onClick={() => onChatSelect(chat)}
          >
            <Avatar className="h-10 w-10 flex-shrink-0">
              <AvatarImage src={chatUser?.photoURL || undefined} />
              <AvatarFallback className="bg-green-500 text-white">
                {chatUser ? getInitials(chatUser.displayName) : "?"}
              </AvatarFallback>
            </Avatar>
            <div className="flex-1 min-w-0">
              <div className="flex justify-between items-center">
                <h4 className="font-medium text-sm text-white truncate">
                  {chatUser?.displayName || "Unknown User"}
                </h4>
                {chat.lastMessage && (
                  <span className="text-[10px] text-gray-400">
                    {formatMessageTime(chat.lastMessage.timestamp)}
                  </span>
                )}
              </div>
              <p className="text-xs text-gray-400 truncate">
                {chat.lastMessage ? chat.lastMessage.text : "No messages yet"}
              </p>
            </div>
          </div>
        )
      })}

      {chats.length === 0 && (
        <div className="px-3 py-6 text-center">
          <p className="text-sm text-gray-400">No conversations yet</p>
          <p className="text-xs text-gray-500 mt-1">
            Search for users to start chatting
          </p>
        </div>
      )}
    </div>
  )
}

interface ChatSidebarProps {
  isOpen: boolean
  onClose: () => void
  currentUser: User | null
  users: User[]
  chats: Chat[]
  selectedChat: Chat | null
  searchQuery: string
  onSearchChange: (query: string) => void
  onSignOut: () => void
  onChatSelect: (chat: Chat) => void
  onStartChat: (userId: string) => void
}

export const ChatSidebar = ({
  isOpen,
  onClose,
  currentUser,
  users,
  chats,
  selectedChat,
  searchQuery,
  onSearchChange,
  onSignOut,
  onChatSelect,
  onStartChat,
}: ChatSidebarProps) => {
  return (
    <div
      className={`${isOpen ? "fixed inset-0 z-40 block w-full" : "hidden"
        } md:relative md:block md:w-[320px] lg:w-[400px] h-full bg-[#1e1d1d] border-r border-gray-800`}
    >
      {/* Header */}
      <div className="p-3 bg-[#1e1d1d] border-b border-gray-800 flex items-center justify-between">
        <div className="flex items-center space-x-2">
          <Avatar className="h-8 w-8">
            <AvatarImage src={currentUser?.photoURL || undefined} />
            <AvatarFallback className="bg-green-500 text-white text-sm">
              {currentUser?.displayName ? getInitials(currentUser.displayName) : "U"}
            </AvatarFallback>
          </Avatar>
          <div>
            <h2 className="text-sm font-semibold text-white truncate max-w-[150px]">
              {currentUser?.displayName}
            </h2>
          </div>
        </div>
        <div className="flex items-center space-x-1">
          <Button variant="ghost" size="sm" onClick={onSignOut} title="Sign out">
            <LogOut className="h-4 w-4 text-gray-400" />
          </Button>
          <Button
            variant="ghost"
            size="sm"
            className="md:hidden"
            onClick={onClose}
          >
            <X className="h-4 w-4 text-gray-400" />
          </Button>
        </div>
      </div>

      {/* Search */}
      <div className="p-2 border-b border-gray-800">
        <div className="relative">
          <Search className="absolute left-2 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <Input
            placeholder="Search or start new chat"
            className="pl-8 h-9 text-sm bg-[#2a2a2a] border-gray-700 text-white focus:ring-1 focus:ring-gray-600"
            value={searchQuery}
            onChange={(e) => onSearchChange(e.target.value)}
          />
        </div>
      </div>

      {/* Users/Chats List */}
      <div className="flex-1 overflow-y-auto">
        {searchQuery ? (
          <UsersList users={users} onStartChat={onStartChat} />
        ) : (
          <ChatsList
            chats={chats}
            users={users}
            currentUser={currentUser}
            selectedChat={selectedChat}
            onChatSelect={onChatSelect}
          />
        )}
      </div>
    </div>
  )
}

// File: components\chat\components_chat_FilePreview.tsx
"use client"

import { useState, useEffect, useRef } from "react"
import { Message } from "../types/types_chat"
import { FileText, Film, FileMusic, ImageIcon } from "lucide-react"
import dynamic from 'next/dynamic'
import { AudioPlayer } from "./AudioPlayer"

// Import Shadcn components
import { Card, CardContent, CardDescription, CardFooter } from "@/components/ui/card"
import { AspectRatio } from "@/components/ui/aspect-ratio"
import { Button } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"

const ReactPlayer = dynamic(() => import('react-player/lazy'), {
  ssr: false,
  loading: () => (
    <div className="w-full h-[180px] bg-muted/30 animate-pulse rounded-md flex items-center justify-center">
      <Film className="h-8 w-8 text-muted-foreground/50" />
    </div>
  )
})

interface FilePreviewProps {
  message: Message
}

export const FilePreview = ({ message }: FilePreviewProps) => {
  const { fileUrl, fileType, fileName, text } = message
  const [audioDuration, setAudioDuration] = useState<number | null>(null)
  const audioRef = useRef<HTMLAudioElement | null>(null)

  // Load audio duration if this is an audio file and duration isn't already provided
  useEffect(() => {
    if (fileType?.startsWith('audio/') && !message.duration && fileUrl) {
      // Create a temporary audio element to get the duration
      const audio = new Audio(fileUrl)
      audioRef.current = audio

      // The loadedmetadata event fires when duration is available
      const handleLoadedMetadata = () => {
        setAudioDuration(audio.duration)
      }

      audio.addEventListener('loadedmetadata', handleLoadedMetadata)

      // Clean up
      return () => {
        audio.removeEventListener('loadedmetadata', handleLoadedMetadata)
        audio.src = '' // Clear source
      }
    }
  }, [fileUrl, fileType, message.duration])

  if (!fileUrl || !fileType) {
    return null
  }

  if (fileType.startsWith('image/')) {
    return (
      <Card className="my-2 overflow-hidden">
        <CardContent className="p-0">
          <AspectRatio ratio={4 / 3}>
            {/* eslint-disable-next-line @next/next/no-img-element */}
            <img
              src={fileUrl}
              alt={fileName || text}
              className="object-cover w-full h-full rounded-t-md"
            />
          </AspectRatio>
        </CardContent>
        <CardFooter className="p-2 flex items-center justify-between bg-muted/20">
          <CardDescription className="text-xs flex items-center">
            <ImageIcon size={12} className="mr-1" /> {fileName || "Image"}
          </CardDescription>
          <Button variant="ghost" size="sm" className="h-6 text-xs" asChild>
            <a href={fileUrl} target="_blank" rel="noopener noreferrer">
              Open
            </a>
          </Button>
        </CardFooter>
      </Card>
    )
  }

  if (fileType.startsWith('video/')) {
    return (
      <Card className="my-2 overflow-hidden">
        <CardContent className="p-0">
          <AspectRatio ratio={16 / 9}>
            <ReactPlayer
              url={fileUrl}
              controls={true}
              width="100%"
              height="100%"
              className="react-player"
            />
          </AspectRatio>
        </CardContent>
        <CardFooter className="p-2 flex items-center justify-between bg-muted/20">
          <CardDescription className="text-xs flex items-center">
            <Film size={12} className="mr-1" /> {fileName || "Video"}
          </CardDescription>
          <Button variant="ghost" size="sm" className="h-6 text-xs" asChild>
            <a href={fileUrl} target="_blank" rel="noopener noreferrer">
              Download
            </a>
          </Button>
        </CardFooter>
      </Card>
    )
  }

  if (fileType.startsWith('audio/')) {
    // Show loading state while getting audio duration
    if (!message.duration && !audioDuration) {
      return (
        <Card className="my-2">
          <CardContent className="p-4">
            <div className="rounded-lg bg-muted/20 p-2">
              <div className="flex items-center justify-center py-4">
                <Skeleton className="h-8 w-48" />
              </div>
            </div>
            <CardFooter className="px-0 pt-2 pb-0 flex items-center justify-between">
              <CardDescription className="text-xs flex items-center">
                <FileMusic size={12} className="mr-1" /> {fileName || "Audio"}
              </CardDescription>
              <Skeleton className="h-6 w-16" />
            </CardFooter>
          </CardContent>
        </Card>
      )
    }

    return (
      <Card className="my-2">
        <CardContent className="p-4 ">
          <div className="rounded-lg bg-muted/20 p-2">
            {/* Use our custom AudioPlayer with the duration we got */}
            <AudioPlayer
              src={fileUrl}
              initialDuration={message.duration || audioDuration || 0}
              className="w-full"
            />
          </div>
          <CardFooter className="px-0 pt-2 pb-0 flex items-center justify-between">
            <CardDescription className="text-xs flex items-center">
              <FileMusic size={12} className="mr-1" /> {fileName || "Audio"}
            </CardDescription>
            <Button variant="ghost" size="sm" className="h-6 text-xs" asChild>
              <a href={fileUrl} target="_blank" rel="noopener noreferrer">
                Download
              </a>
            </Button>
          </CardFooter>
        </CardContent>
      </Card>
    )
  }

  // For document or other file types
  return (
    <Card className="my-2">
      <CardContent className="p-4">
        <Button variant="outline" className="w-full justify-start" asChild>
          <a
            href={fileUrl}
            target="_blank"
            rel="noopener noreferrer"
            className="flex items-center p-3 rounded-lg"
          >
            <FileText className="mr-2 h-6 w-6 text-primary" />
            <div className="overflow-hidden flex-1">
              <p className="font-medium text-sm truncate">{fileName || text}</p>
              <p className="text-xs text-muted-foreground">Click to open</p>
            </div>
          </a>
        </Button>
      </CardContent>
    </Card>
  )
}

// File: components\chat\components_chat_MessageInput.tsx
"use client"

import { useState, useRef, useEffect } from "react"
import { Button } from "@/components/ui/button"
import { Smile, Paperclip, Send, Mic, StopCircle, Trash2 } from "lucide-react"
import { Textarea } from "@/components/ui/textarea"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger
} from "@/components/ui/tooltip"
import { Card, CardContent } from "@/components/ui/card"
import {
  Popover,
  PopoverContent,
  PopoverTrigger
} from "@/components/ui/popover"
import { Progress } from "@/components/ui/progress"
import { AudioPlayer } from "./AudioPlayer"
import { toast } from "sonner" // Import toast from your UI library

// You could use a proper emoji picker library here
// For simplicity, I'm adding a basic placeholder
const EmojiPicker = ({ onEmojiSelect }: { onEmojiSelect: (emoji: string) => void }) => {
  const commonEmojis = ["😊", "😂", "❤️", "👍", "🙌", "🎉", "🔥", "👏", "🤔", "😍"]

  return (
    <div className="grid grid-cols-5 gap-2 p-2">
      {commonEmojis.map((emoji) => (
        <Button
          key={emoji}
          variant="ghost"
          className="h-8 w-8 p-0"
          onClick={() => onEmojiSelect(emoji)}
        >
          {emoji}
        </Button>
      ))}
    </div>
  )
}

interface MessageInputProps {
  message: string
  isUploading: boolean
  onMessageChange: (message: string) => void
  onSendMessage: () => void
  onFileSelect: () => void
  onVoiceMessageSend: (audioBlob: Blob) => void
}

export const MessageInput = ({
  message,
  isUploading,
  onMessageChange,
  onSendMessage,
  onFileSelect,
  onVoiceMessageSend
}: MessageInputProps) => {
  const [uploadProgress, setUploadProgress] = useState(0)
  const [isRecording, setIsRecording] = useState(false)
  const [audioURL, setAudioURL] = useState<string | null>(null)
  const [audioDuration, setAudioDuration] = useState<number>(0)
  const mediaRecorderRef = useRef<MediaRecorder | null>(null)
  const audioChunksRef = useRef<Blob[]>([])
  const mediaStreamRef = useRef<MediaStream | null>(null)
  const recordingStartTimeRef = useRef<number | null>(null)

  // Simulate upload progress
  if (isUploading && uploadProgress < 100) {
    setTimeout(() => {
      setUploadProgress((prev) => Math.min(prev + 10, 100))
    }, 300)
  } else if (!isUploading && uploadProgress !== 0) {
    setUploadProgress(0)
  }

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true })
      mediaStreamRef.current = stream
      const mediaRecorder = new MediaRecorder(stream)
      mediaRecorderRef.current = mediaRecorder
      audioChunksRef.current = []

      mediaRecorder.ondataavailable = (event) => {
        audioChunksRef.current.push(event.data)
      }

      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' })
        const audioURL = URL.createObjectURL(audioBlob)
        setAudioURL(audioURL)
      }

      mediaRecorder.start()
      setIsRecording(true)
      recordingStartTimeRef.current = Date.now()
    } catch (error) {
      console.error("Error accessing microphone:", error)
    }
  }

  const stopRecording = () => {
    if (mediaRecorderRef.current && mediaRecorderRef.current.state !== "inactive") {
      mediaRecorderRef.current.stop()
    }

    // Stop all audio tracks to release the microphone
    if (mediaStreamRef.current) {
      mediaStreamRef.current.getTracks().forEach(track => {
        track.stop()
      })
      mediaStreamRef.current = null
    }

    // Calculate recording duration
    if (recordingStartTimeRef.current) {
      const endTime = Date.now()
      const duration = (endTime - recordingStartTimeRef.current) / 1000 // duration in seconds
      setAudioDuration(duration)
      toast(`Audio duration: ${duration} seconds`)
      recordingStartTimeRef.current = null
    }

    setIsRecording(false)
  }

  const sendVoiceMessage = () => {
    if (audioURL && audioChunksRef.current.length > 0) {
      const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' })
      onVoiceMessageSend(audioBlob, audioDuration)

      // Clear audio state after sending
      setAudioURL(null)
      audioChunksRef.current = []
      setAudioDuration(0)
    }
  }

  const discardRecording = () => {
    setAudioURL(null)
    audioChunksRef.current = []
    setAudioDuration(0)

    // Also ensure any active stream is stopped when discarding
    if (mediaStreamRef.current) {
      mediaStreamRef.current.getTracks().forEach(track => {
        track.stop()
      })
      mediaStreamRef.current = null
    }
  }

  return (
    <Card className="rounded-none border-x-0 border-b-0 shadow-none">
      <CardContent className="p-3">
        {/* Audio Preview */}
        {audioURL && (
          <div className="mb-3 p-2 bg-muted/30 rounded-md">
            <div className="flex items-center justify-between">
              <div className="text-xs font-medium text-muted-foreground mb-1">
                Voice Message Preview
              </div>
              <div className="flex space-x-1">
                <Button variant="ghost" size="sm" onClick={sendVoiceMessage} className="h-7 px-2">
                  <Send className="h-3.5 w-3.5 text-primary mr-1" />
                  <span className="text-xs">Send</span>
                </Button>
                <Button variant="ghost" size="sm" onClick={discardRecording} className="h-7 px-2">
                  <Trash2 className="h-3.5 w-3.5 text-destructive mr-1" />
                  <span className="text-xs">Discard</span>
                </Button>
              </div>
            </div>
            <AudioPlayer src={audioURL} initialDuration={audioDuration} />
          </div>
        )}

        <div className="flex items-center space-x-2">
          <TooltipProvider>
            <Popover>
              <PopoverTrigger asChild>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button variant="ghost" size="sm" className="text-muted-foreground">
                      <Smile className="h-5 w-5" />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent><p className="dark: bg-black dark:text-white">Add emoji</p></TooltipContent>
                </Tooltip>
              </PopoverTrigger>
              <PopoverContent className="w-64 p-0">
                <EmojiPicker onEmojiSelect={(emoji) => onMessageChange(message + emoji)} />
              </PopoverContent>
            </Popover>
          </TooltipProvider>

          <TooltipProvider>
            <Tooltip>
              <TooltipTrigger asChild>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={onFileSelect}
                  disabled={isUploading}
                  className={`text-muted-foreground ${isUploading ? "opacity-50" : ""}`}
                >
                  <Paperclip
                    className={`h-5 w-5 ${isUploading ? "text-primary animate-pulse" : ""}`}
                  />
                </Button>
              </TooltipTrigger>
              <TooltipContent><p className="dark: bg-black dark:text-white">Attach file</p></TooltipContent>
            </Tooltip>
          </TooltipProvider>

          <div className="flex-1">
            <Textarea
              placeholder={isUploading ? "Uploading file..." : "Type a message"}
              className="w-full resize-none min-h-[40px] max-h-[120px] text-sm bg-muted/50"
              value={message}
              onChange={(e) => onMessageChange(e.target.value)}
              disabled={isUploading}
              onKeyDown={(e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                  e.preventDefault()
                  onSendMessage()
                }
              }}
              rows={1}
            />
          </div>

          <TooltipProvider>
            {message.trim() ? (
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={onSendMessage}
                    disabled={isUploading}
                    className="text-primary hover:text-primary hover:bg-primary/10"
                  >
                    <Send className="h-5 w-5" />
                  </Button>
                </TooltipTrigger>
                <TooltipContent><p className="dark: bg-black dark:text-white">Send message</p></TooltipContent>
              </Tooltip>
            ) : (
              <Tooltip>
                <TooltipTrigger asChild>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={isRecording ? stopRecording : startRecording}
                    className={`text-muted-foreground ${isRecording ? "text-red-500 animate-pulse" : ""}`}
                  >
                    {isRecording ? <StopCircle className="h-5 w-5" /> : <Mic className="h-5 w-5" />}
                  </Button>
                </TooltipTrigger>
                  <TooltipContent><p className="dark: bg-black dark:text-white">{isRecording ? "Stop recording" : "Record voice message"}</p></TooltipContent>
              </Tooltip>
            )}
          </TooltipProvider>
        </div>

        {isUploading && (
          <div className="mt-2">
            <Progress value={uploadProgress} className="h-1" />
            <p className="text-xs text-primary mt-1 text-center">
              Uploading file... {uploadProgress}%
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

// File: components\chat\components_chat_MessageList.tsx
import { Message, User } from "../types/types_chat"
import { FilePreview } from "./components_chat_FilePreview"
import { formatMessageTime } from "../utils/lib_utils (1)"

interface MessageListProps {
  messages: Message[]
  currentUser: User | null
  formatTime: (timestamp: string) => string
}

export const MessageList = ({ messages, currentUser, formatTime }: MessageListProps) => {
  if (messages.length === 0) {
    return (
      <div className="h-full flex items-center justify-center">
        <div className="text-center text-gray-400">
          <p className="text-sm">No messages yet</p>
          <p className="text-xs mt-1">Send a message to start the conversation</p>
        </div>
      </div>
    )
  }

  return (
    <>
      {messages.map((message) => {
        const isCurrentUser = message.senderId === currentUser?.uid

        return (
          <div
            key={message.id}
            className={`flex ${isCurrentUser ? "justify-end" : "justify-start"}`}
          >
            <div
              className={`max-w-[75%] rounded-lg px-3 py-2 mb-3 ${isCurrentUser
                ? "bg-blue-500 text-white"
                : "bg-[#2a2a2a] text-white"
                }`}
            >
              {message.fileUrl && message.fileType && (
                <FilePreview message={message} />
              )}

              {message.text && (
                <p className="text-sm whitespace-pre-wrap break-words">
                  {message.text}
                </p>
              )}

              <div
                className={`text-[10px] mt-1 flex items-center justify-end
                ${isCurrentUser ? "text-blue-100" : "text-gray-400"}`}
              >
                {formatMessageTime(message.timestamp)}
                {isCurrentUser && (
                  <span className="ml-1">
                    {message.read ? "✓✓" : "✓"}
                  </span>
                )}
              </div>
            </div>
          </div>
        )
      })}
    </>
  )
}

// File: components\chat\components_chat_WelcomeScreen.tsx
import { Button } from "@/components/ui/button"
import { Menu, MessageSquare } from "lucide-react"

interface WelcomeScreenProps {
  onOpenSidebar: () => void
}

export const WelcomeScreen = ({ onOpenSidebar }: WelcomeScreenProps) => {
  return (
    <div className="h-full flex flex-col items-center justify-center p-4">
      <Button
        variant="ghost"
        size="sm"
        className="md:hidden absolute top-3 left-3"
        onClick={onOpenSidebar}
      >
        <Menu className="h-4 w-4 mr-2 text-gray-400" />
        <span className="text-sm text-gray-400">Chats</span>
      </Button>
      <div className="text-center max-w-md">
        <div className="w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4">
          <MessageSquare className="h-8 w-8 text-white" />
        </div>
        <h2 className="text-xl font-bold text-white mb-2">Memchat</h2>
        <p className="text-sm text-gray-400">
          Select a chat from the sidebar or search for a user to start a new
          conversation.
        </p>
      </div>
    </div>
  )
}

// File: components\chat\AudioPlayer.tsx
"use client"

import { useState, useEffect, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Slider } from "@/components/ui/slider"
import { Play, Pause, Volume2, VolumeX } from "lucide-react"
import { cn } from "@/lib/utils"

interface AudioPlayerProps {
    src: string
    className?: string
    initialDuration?: number
}

export function AudioPlayer({ src, className, initialDuration }: AudioPlayerProps) {
    const [isPlaying, setIsPlaying] = useState(false)
    const [currentTime, setCurrentTime] = useState(0)
    const [duration, setDuration] = useState(initialDuration || 0)
    const [volume, setVolume] = useState(1)
    const [isMuted, setIsMuted] = useState(false)
    const audioRef = useRef<HTMLAudioElement | null>(null)

    useEffect(() => {
        const audio = audioRef.current
        if (!audio) return

        const setAudioData = () => {
            // Only update duration from metadata if we don't have initialDuration
            if (!initialDuration) {
                setDuration(audio.duration)
            }
        }

        const setAudioTime = () => {
            setCurrentTime(audio.currentTime)
        }

        const handleEnded = () => {
            setIsPlaying(false)
            audio.currentTime = 0
            setCurrentTime(0)
        }

        // Events
        audio.addEventListener('loadeddata', setAudioData)
        audio.addEventListener('timeupdate', setAudioTime)
        audio.addEventListener('ended', handleEnded)

        return () => {
            audio.removeEventListener('loadeddata', setAudioData)
            audio.removeEventListener('timeupdate', setAudioTime)
            audio.removeEventListener('ended', handleEnded)
        }
    }, [initialDuration])

    // Update duration when initialDuration changes
    useEffect(() => {
        if (initialDuration) {
            setDuration(initialDuration)
        }
    }, [initialDuration])

    // Play/Pause
    const togglePlay = () => {
        const audio = audioRef.current
        if (!audio) return

        if (isPlaying) {
            audio.pause()
            setIsPlaying(false)
        } else {
            audio.play()
            setIsPlaying(true)
        }
    }

    // Update current time
    const handleTimeChange = (values: number[]) => {
        const audio = audioRef.current
        if (!audio) return

        audio.currentTime = values[0]
        setCurrentTime(values[0])
    }

    // Toggle mute
    const toggleMute = () => {
        const audio = audioRef.current
        if (!audio) return

        if (isMuted) {
            audio.volume = volume
            setIsMuted(false)
        } else {
            audio.volume = 0
            setIsMuted(true)
        }
    }

    // Format time (mm:ss)
    const formatTime = (time: number) => {
        if (isNaN(time)) return "00:00"

        const minutes = Math.floor(time / 60)
        const seconds = Math.floor(time % 60)
        return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
    }

    return (
        <div className={cn("flex flex-col space-y-2", className)}>
            <audio ref={audioRef} src={src} preload="metadata" />

            <div className="flex items-center space-x-2">
                <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 rounded-full p-0"
                    onClick={togglePlay}
                >
                    {isPlaying ? (
                        <Pause className="h-4 w-4" />
                    ) : (
                        <Play className="h-4 w-4" />
                    )}
                </Button>

                <Slider
                    value={[currentTime]}
                    max={duration || 100}
                    step={0.1}
                    onValueChange={handleTimeChange}
                    className="w-full"
                />

                <div className="text-xs text-muted-foreground w-16 text-right">
                    {formatTime(currentTime)}/{formatTime(duration)}
                </div>

                <Button
                    variant="ghost"
                    size="sm"
                    className="h-8 w-8 rounded-full p-0"
                    onClick={toggleMute}
                >
                    {isMuted ? (
                        <VolumeX className="h-4 w-4" />
                    ) : (
                        <Volume2 className="h-4 w-4" />
                    )}
                </Button>
            </div>
        </div>
    )
}